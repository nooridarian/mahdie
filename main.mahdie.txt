#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <conio.h>
#include <graphics.h>
#include <iostream>
using namespace std;

void pcmove(char board[8][8],int pc[2]);
void validred(char board[8][8]);
void validblue(char board[8][8]);
void show(char board[8][8]);
int validmoves(char board[8][8],int i,int j,int I,int J,char C1,char C2);
int possible(char board[8][8],int i,int j,int I,int J,char C1,char C2);
int getdirection(char board[8][8],int i,int j,int I,int J,char C1,char C2);
void correct(char board[8][8]);
void play(char board[8][8],int i , int j , char turn);
int possiblemove(char board[8][8]);

int main( )
{
    initwindow(640,640);

    int start=0;
    while(!kbhit()){
        if(start<1){
            setfillstyle(1,8);
            fillellipse(320,320,100,100);
            setfillstyle(1,15);
            bar(310,220,330,320);
            start++;
            }
        if(ismouseclick(WM_LBUTTONDOWN)){
                int X,Y;
                X=mousex();
                Y=mousey();
                clearmouseclick(WM_LBUTTONDOWN);
                double temp=sqrt((X-320)*(X-320)+(Y-320)*(Y-320));
        if(temp<100){
                setfillstyle(1,0);
                bar(0,0,640,640);
            int pc[2]={0,0};
                setcolor(7);
                rectangle(0,0,640,640);
                for(int i=0;i<8;i++){
                    line(0,i*80,640,i*80);
                    line(i*80,0,i*80,640);
                }
                bool val2=true,fin=false;
                int pre=0;
                int i,j,n,x,y;
                char turn='R';
                char board[8][8]={'N','N','N','N','N','N','N','N',
                              'N','N','N','N','N','N','N','N',
                              'N','N','N','N','N','N','N','N',
                              'N','N','N','B','R','N','N','N',
                              'N','N','N','R','B','N','N','N',
                              'N','N','N','N','N','N','N','N',
                              'N','N','N','N','N','N','N','N',
                              'N','N','N','N','N','N','N','N'};
             correct(board);
             show(board);
            while (!kbhit())
            {   int left=0;
                for (i=0 ; i<8 ; i++)
                 for (j=0 ; j<8 ; j++)
                    if (board[i][j]=='N')
                       left++;
                if(fin || left==0){

                    setfillstyle(1,0);
                    bar(10,10,50,50);
                    setfillstyle(1,0);
                    bar(300,0,492,49);
                    int r=0,b=0;
                    for (i=0 ; i<8 ; i++)
                     for (j=0 ; j<8 ; j++)
                       {
                        if (board[i][j]=='R') r++;
                        if (board[i][j]=='B') b++;
                       }
                       cout<<r<<"  -  "<<b<<endl;
                     if (b>r){
                            setfillstyle(1,0);
                            bar(0,0,640,640);
                            setfillstyle(1,4);
                            bar(0,50,640,100);
                            cout<<"You Lost!"<<endl;
                     }
                     else if (r>b){

                            setfillstyle(1,0);
                            bar(0,0,640,640);
                            setfillstyle(1,10);
                            bar(0,50,640,100);
                            cout<<"You won!"<<endl;
                       }
                     else{
                            setfillstyle(1,0);
                            bar(0,0,640,640);
                            setfillstyle(1,9);
                            bar(0,50,640,100);
                            cout<<"No winner!"<<endl;
                     }
                     start=0;
                        break;
                }
                else{
                bool val=true;
              if(ismouseclick(WM_LBUTTONDOWN)){
                x=(mousex()/80);
                y=(mousey()/80);
                    clearmouseclick(WM_LBUTTONDOWN);
                validred(board);
                if(board[x][y]!='O')
                    val=false;

                 if(val){
                     pre=0;
                     play(board,x,y,turn);
                     if (turn=='R')
                        turn='B';
                     else
                        turn='R';
                 }
                correct(board);
                 show(board);
                 val=true;
                 if(turn=='B'){
                    validblue(board);
                    pcmove(board,pc);
                    x=pc[0];
                    y=pc[1];
                    //cout<<x<<y<<endl;
                    if(board[x][y]!='O'){
                        val=false;
                    }
                     if(val){
                        pre=0;
                        play(board,x,y,turn);
                        if (turn=='R')
                            turn='B';
                        else
                            turn='R';
                     }
                     delay(750);
                     correct(board);
                    show(board);

                 }
                 do{

                 if(turn=='R')
                    validred(board);
                 else
                    validblue(board);
                 if(possiblemove(board)==0)
                    {
                      if (turn=='R') turn='B';  else turn='R';
                     if(pre==1){
                        fin=true;
                        break;
                     }

                     else
                        pre=1;
                    }
                    else{
                        pre=0;
                    }
                    correct(board);
                 }while(possiblemove(board)!=0);
                    }
                }
            }
        }
       else{
            start=0;
        }
        }
    }
     getch();
 }

 void show(char board[8][8])
{
 for(int i=0;i<8;i++)
   {
   for (int j=0;j<8;j++){
    if(board[i][j]=='R'){
        setfillstyle(1,4);
        fillellipse(i*80+40,j*80+40,30,30);
    }
    else if(board[i][j]=='B'){
        setfillstyle(1,1);
        fillellipse(i*80+40,j*80+40,30,30);
    }
   }
  }
}
int validmoves(char board[8][8],int i,int j,int I,int J,char C1,char C2)
{
  int x=i,y=j;
  x=i+I; y=j+J;
  if (x>=0 && x<8 && y>=0 && y<8)
          if (board[x][y]==C2)
		  {
		  	while (board[x][y]==C2) { x=x+I; y=y+J;}
		    if (x>=0 && x<8 && y>=0 && y<8 && board[x][y]==C1 )
			 {
			  board[i][j]='O';
			  return 1;
			 }
		  }
	return 0 ;
}
void validred(char board[8][8])
{
	int i,j;
	int x,y;
	for (i=0 ; i<8 ; i++)
	 for (j=0 ; j<8 ; j++)
	   {
	   	if (board[i][j]=='N')
		   {
		     validmoves(board,i,j,1,0,'R','B');
		     validmoves(board,i,j,1,1,'R','B');
		     validmoves(board,i,j,0,1,'R','B');
		     validmoves(board,i,j,-1,0,'R','B');
		     validmoves(board,i,j,0,-1,'R','B');
		     validmoves(board,i,j,-1,-1,'R','B');
		     validmoves(board,i,j,-1,1,'R','B');
		     validmoves(board,i,j,1,-1,'R','B');
		   }
	   }
}
void validblue(char board[8][8])
{
	int i,j;
	int x,y;
	for (i=0 ; i<8 ; i++)
	 for (j=0 ; j<8 ; j++)
	   {
	   	if (board[i][j]=='N')
		   {
		     validmoves(board,i,j,1,0,'B','R');
		     validmoves(board,i,j,1,1,'B','R');
		     validmoves(board,i,j,0,1,'B','R');
		     validmoves(board,i,j,-1,0,'B','R');
		     validmoves(board,i,j,0,-1,'B','R');
		     validmoves(board,i,j,-1,-1,'B','R');
		     validmoves(board,i,j,-1,1,'B','R');
		     validmoves(board,i,j,1,-1,'B','R');
		   }
	   }
}
void correct(char board[8][8])
{
	int i,j;
	for (i=0 ; i<8 ; i++)
	 for (j=0 ; j<8 ; j++)
	   	if (board[i][j]=='O') board[i][j]='N' ;
}
int possible(char board[8][8],int i,int j,int I,int J,char C1,char C2)
{
  int x=i,y=j;
  x=i+I; y=j+J;
  if (x>=0 && x<8 && y>=0 && y<8)
          if (board[x][y]==C2)
		  {
		  	while (board[x][y]==C2) { x=x+I; y=y+J;}
		    if (x>=0 && x<8 && y>=0 && y<8 && board[x][y]==C1 )
			 {
			  return 1;
			 }
		  }
	return 0 ;
}
int getdirection(char board[8][8],int i,int j,int I,int J,char C1,char C2)
{
    int t=0;
  if (possible(board,i,j,I,J,C1,C2))
  {
  	int x=i,y=j;
    x=i+I; y=j+J;
   	while (board[x][y]!=C1) {
	   board[x][y]=C1;
	   x=x+I;
	    y=y+J;
	    t++;
	   }
  }
  return t;
}


void play(char board[8][8],int i , int j , char turn)
{
	board[i][j]=turn;
	if (turn=='R')
	 {
	 	     getdirection(board,i,j,1,0,'R','B');
		     getdirection(board,i,j,1,1,'R','B');
		     getdirection(board,i,j,0,1,'R','B');
		     getdirection(board,i,j,-1,0,'R','B');
		     getdirection(board,i,j,0,-1,'R','B');
		     getdirection(board,i,j,-1,-1,'R','B');
		     getdirection(board,i,j,-1,1,'R','B');
		     getdirection(board,i,j,1,-1,'R','B');
	 }
	 else
	 	   {
		     getdirection(board,i,j,1,0,'B','R');
		     getdirection(board,i,j,1,1,'B','R');
		     getdirection(board,i,j,0,1,'B','R');
		     getdirection(board,i,j,-1,0,'B','R');
		     getdirection(board,i,j,0,-1,'B','R');
		     getdirection(board,i,j,-1,-1,'B','R');
		     getdirection(board,i,j,-1,1,'B','R');
		     getdirection(board,i,j,1,-1,'B','R');
		   }

}
int possiblemove(char board[8][8])
{
	int i,j;
	for (i=0 ; i<8 ; i++)
	 for (j=0 ; j<8 ; j++)
	   	if (board[i][j]=='O') return 1 ;
	return 0 ;
}
void pcmove(char board[8][8],int pc[2]){
    int maxt=0,i,j,i1,j1;
    char b[8][8];
    //cout<<"1st"<<pc[0]<<pc[1]<<endl;
    for (i=0 ; i<8 ; i++){
	 for (j=0 ; j<8 ; j++){
           for (i1=0 ; i1<8 ; i1++)
                for (j1=0 ; j1<8 ; j1++)
                    b[i1][j1]=board[i1][j1];
	   	if (board[i][j]=='O'){
            int t=0;
            t+=getdirection(b,i,j,1,0,'B','R');
            t+=getdirection(b,i,j,1,1,'B','R');
            t+=getdirection(b,i,j,0,1,'B','R');
            t+=getdirection(b,i,j,-1,0,'B','R');
            t+=getdirection(b,i,j,0,-1,'B','R');
            t+=getdirection(b,i,j,-1,-1,'B','R');
            t+=getdirection(b,i,j,-1,1,'B','R');
            t+=getdirection(b,i,j,1,-1,'B','R');
            if(t>maxt){
                maxt=t;
                pc[0]=i;
                pc[1]=j;
            }
        }
	 }
    }
}
